{"version":3,"file":"static/js/815.a05f5ecf.chunk.js","mappings":"4LAEaA,E,QAASC,GAAAA,OAAH,yRAIG,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,oBAMlB,SAAAH,GAAC,OAAIA,EAAEC,MAAMC,OAAOE,W,6ICT/BC,GAAaN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,qIAQVQ,EAAQR,EAAAA,GAAAA,MAAH,iNAWLS,GAAQT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,yZ,mECpBLW,E,QAAQX,GAAAA,GAAH,uH,6JCQZY,EAAUC,OACd,0HAEIC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,IAAI,GACJC,QACCP,EACA,0IAEDQ,SAAS,qBACZC,MAAON,EAAAA,KAAaM,QAAQD,SAAS,sBACrCE,SAAUP,EAAAA,KAEPK,SAAS,yBACTF,IAAI,EAAG,sDACPC,QAAQ,cAAe,qCAGfI,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAYjB,OACE,iCACE,SAAC,IAAD,8BACA,SAAC,KAAD,CACEC,cAAe,CAAET,KAAM,GAAII,MAAO,GAAIC,SAAU,IAChDK,iBAAkBb,EAClBc,SAhBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACxBC,EAAO,CACXd,KAAMY,EAAOZ,KACbI,MAAOQ,EAAOR,MACdC,SAAUO,EAAOP,UAEnBE,GAASQ,EAAAA,EAAAA,IAAaD,IACtBD,KAME,SAKG,SAAAG,GACC,IACEJ,EAOEI,EAPFJ,OACAK,EAMED,EANFC,QACAC,EAKEF,EALFE,OACAC,EAIEH,EAJFG,aACAC,EAGEJ,EAHFI,aACAC,EAEEL,EAFFK,WACAC,EACEN,EADFM,aAGF,OACE,UAACjC,EAAA,GAAD,CAAYsB,SAAUW,EAAtB,WACE,SAAC,KAAD,CAAOC,QAAQ,OAAf,mBACA,SAAC,KAAD,CACEC,GAAG,OACHxB,KAAK,OACLyB,KAAK,OACLC,YAAY,kBACZC,MAAOf,EAAOZ,KACd4B,SAAUR,EACVS,OAAQR,EACRS,UAAWZ,EAAOlB,MAAQiB,EAAQjB,MAAQ,UAE3CkB,EAAOlB,MAAQiB,EAAQjB,OAAQ,yBAAMkB,EAAOlB,QAE7C,SAAC,KAAD,CAAOuB,QAAQ,QAAf,oBACA,SAAC,KAAD,CACEC,GAAG,QACHxB,KAAK,QACLyB,KAAK,OACLC,YAAY,mBACZC,MAAOf,EAAOR,MACdwB,SAAUR,EACVS,OAAQR,EACRS,UAAWZ,EAAOd,OAASa,EAAQb,OAAS,UAE7Cc,EAAOd,OAASa,EAAQb,QAAS,yBAAMc,EAAOd,SAE/C,SAAC,KAAD,CAAOmB,QAAQ,WAAf,uBACA,SAAC,KAAD,CACEC,GAAG,WACHxB,KAAK,WACLyB,KAAK,WACLC,YAAY,sBACZC,MAAOf,EAAOP,SACduB,SAAUR,EACVS,OAAQR,EACRS,UAAWZ,EAAOb,UAAYY,EAAQZ,UAAY,UAEnDa,EAAOb,UAAYY,EAAQZ,WAC1B,yBAAMa,EAAOb,YAGf,SAAC,IAAD,CAAQoB,KAAK,SAASM,SAAUZ,EAAhC,2BAOR,sDACyB,SAAC,KAAD,CAAMa,GAAG,SAAT,0B,UCnG/B,EAXqB,WACnB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,yCAEF,SAAC3B,EAAD","sources":["components/common/ButtonStyled.js","components/common/FormStyled.js","components/common/TitleStyled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  padding: 5px 10px;\n  margin: 5px 10px;\n  text-transform: capitalize;\n  background-color: ${p => p.theme.colors.backgroundButton};\n  border: none;\n  border-radius: 5px;\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.75);\n  cursor: pointer;\n  :hover {\n    background-color: ${p => p.theme.colors.accent};\n  }\n`;","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const Label = styled.label`\n  min-width: 300px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  width: 16rem;\n  margin-bottom: 20px;\n  color: #0000ff;\n`;\n\nexport const Input = styled(Field)`\n  box-sizing: border-box;\n  min-width: 300px;\n  padding-left: 20px;\n  height: 40px;\n  font-family: inherit;\n  border: none;\n  outline: none;\n  border-radius: 0.5rem;\n  box-shadow: inset 0.2rem 0.2rem 0.5rem #ffffff;\n  background: #6178ea;\n  color: #0000ff;\n  :focus {\n    outline: none;\n    box-shadow: 0.3rem 0.3rem 0.6rem #0000ff, -0.2rem -0.2rem 0.5rem #c2c2c2;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  margin-bottom: 10px;\n  text-transform: uppercase;\n  font-weight: 700;\n  color: #0000ff;\n`;\n","import { Button } from 'components/common/ButtonStyled';\nimport { Title } from 'components/common/TitleStyled';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { registerUser } from '../../redux/auth/authOperation';\nimport * as yup from 'yup';\nimport { Input, Label, FormStyled } from '../common/FormStyled';\nimport { Link } from 'react-router-dom';\n// import { Input } from 'components/common/InputStyled';\n\nconst nameReg = RegExp(\n  /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/);\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2)\n    .matches(\n      nameReg,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('No name provided.'),\n  email: yup.string().email().required('No email provided.'),\n  password: yup\n    .string()\n    .required('No password provided.')\n    .min(8, 'Password is too short - should be 8 chars minimum.')\n    .matches(/(?=.*[0-9])/, 'Password must contain a number.'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const user = {\n      name: values.name,\n      email: values.email,\n      password: values.password,\n    };\n    dispatch(registerUser(user));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Title>Create Account</Title>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        {props => {\n          const {\n            values,\n            touched,\n            errors,\n            isSubmitting,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n          } = props;\n\n          return (\n            <FormStyled onSubmit={handleSubmit}>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                placeholder=\"Enter your name\"\n                value={values.name}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                className={errors.name && touched.name && 'error'}\n              />\n              {errors.name && touched.name && <div>{errors.name}</div>}\n\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"text\"\n                placeholder=\"Enter your email\"\n                value={values.email}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                className={errors.email && touched.email && 'error'}\n              />\n              {errors.email && touched.email && <div>{errors.email}</div>}\n\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={values.password}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                className={errors.password && touched.password && 'error'}\n              />\n              {errors.password && touched.password && (\n                <div>{errors.password}</div>\n              )}\n\n              <Button type=\"submit\" disabled={isSubmitting}>\n                SignUp\n              </Button>\n            </FormStyled>\n          );\n        }}\n      </Formik>\n      <div>\n        Do you have an account?<Link to=\"/login\">Login</Link>\n      </div>\n    </>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Helmet } from 'react-helmet';\n\nconst RegisterPage = () => {\n  return (\n    <div>\n      <Helmet>\n        <title>SignUp</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default RegisterPage;"],"names":["Button","styled","p","theme","colors","backgroundButton","accent","FormStyled","Form","Label","Input","Field","Title","nameReg","RegExp","schema","yup","shape","name","min","matches","required","email","password","RegisterForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","user","registerUser","props","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","htmlFor","id","type","placeholder","value","onChange","onBlur","className","disabled","to","Helmet"],"sourceRoot":""}